/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Concept_pb = require('./Concept_pb.js');
goog.exportSymbol('proto.session.Answer', null, global);
goog.exportSymbol('proto.session.Centrality', null, global);
goog.exportSymbol('proto.session.ClusterSizes', null, global);
goog.exportSymbol('proto.session.Clusters', null, global);
goog.exportSymbol('proto.session.ComputeAnswer', null, global);
goog.exportSymbol('proto.session.ConceptIds', null, global);
goog.exportSymbol('proto.session.Paths', null, global);
goog.exportSymbol('proto.session.QueryAnswer', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Answer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.session.Answer.oneofGroups_);
};
goog.inherits(proto.session.Answer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Answer.displayName = 'proto.session.Answer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.session.Answer.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.session.Answer.AnswerCase = {
  ANSWER_NOT_SET: 0,
  QUERYANSWER: 1,
  COMPUTEANSWER: 2,
  OTHERRESULT: 3
};

/**
 * @return {proto.session.Answer.AnswerCase}
 */
proto.session.Answer.prototype.getAnswerCase = function() {
  return /** @type {proto.session.Answer.AnswerCase} */(jspb.Message.computeOneofCase(this, proto.session.Answer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Answer.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Answer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Answer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Answer.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryanswer: (f = msg.getQueryanswer()) && proto.session.QueryAnswer.toObject(includeInstance, f),
    computeanswer: (f = msg.getComputeanswer()) && proto.session.ComputeAnswer.toObject(includeInstance, f),
    otherresult: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Answer}
 */
proto.session.Answer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Answer;
  return proto.session.Answer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Answer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Answer}
 */
proto.session.Answer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.session.QueryAnswer;
      reader.readMessage(value,proto.session.QueryAnswer.deserializeBinaryFromReader);
      msg.setQueryanswer(value);
      break;
    case 2:
      var value = new proto.session.ComputeAnswer;
      reader.readMessage(value,proto.session.ComputeAnswer.deserializeBinaryFromReader);
      msg.setComputeanswer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOtherresult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Answer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Answer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Answer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Answer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryanswer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.session.QueryAnswer.serializeBinaryToWriter
    );
  }
  f = message.getComputeanswer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.session.ComputeAnswer.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional QueryAnswer queryAnswer = 1;
 * @return {?proto.session.QueryAnswer}
 */
proto.session.Answer.prototype.getQueryanswer = function() {
  return /** @type{?proto.session.QueryAnswer} */ (
    jspb.Message.getWrapperField(this, proto.session.QueryAnswer, 1));
};


/** @param {?proto.session.QueryAnswer|undefined} value */
proto.session.Answer.prototype.setQueryanswer = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.session.Answer.oneofGroups_[0], value);
};


proto.session.Answer.prototype.clearQueryanswer = function() {
  this.setQueryanswer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Answer.prototype.hasQueryanswer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ComputeAnswer computeAnswer = 2;
 * @return {?proto.session.ComputeAnswer}
 */
proto.session.Answer.prototype.getComputeanswer = function() {
  return /** @type{?proto.session.ComputeAnswer} */ (
    jspb.Message.getWrapperField(this, proto.session.ComputeAnswer, 2));
};


/** @param {?proto.session.ComputeAnswer|undefined} value */
proto.session.Answer.prototype.setComputeanswer = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.session.Answer.oneofGroups_[0], value);
};


proto.session.Answer.prototype.clearComputeanswer = function() {
  this.setComputeanswer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Answer.prototype.hasComputeanswer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string otherResult = 3;
 * @return {string}
 */
proto.session.Answer.prototype.getOtherresult = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.session.Answer.prototype.setOtherresult = function(value) {
  jspb.Message.setOneofField(this, 3, proto.session.Answer.oneofGroups_[0], value);
};


proto.session.Answer.prototype.clearOtherresult = function() {
  jspb.Message.setOneofField(this, 3, proto.session.Answer.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Answer.prototype.hasOtherresult = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.QueryAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.QueryAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.QueryAnswer.displayName = 'proto.session.QueryAnswer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.QueryAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.session.QueryAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.QueryAnswer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.QueryAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    queryanswerMap: (f = msg.getQueryanswerMap()) ? f.toObject(includeInstance, proto.session.Concept.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.QueryAnswer}
 */
proto.session.QueryAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.QueryAnswer;
  return proto.session.QueryAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.QueryAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.QueryAnswer}
 */
proto.session.QueryAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getQueryanswerMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.session.Concept.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.QueryAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.QueryAnswer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.QueryAnswer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.QueryAnswer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueryanswerMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.session.Concept.serializeBinaryToWriter);
  }
};


/**
 * map<string, Concept> queryAnswer = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.session.Concept>}
 */
proto.session.QueryAnswer.prototype.getQueryanswerMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.session.Concept>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.session.Concept));
};


proto.session.QueryAnswer.prototype.clearQueryanswerMap = function() {
  this.getQueryanswerMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.ComputeAnswer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.session.ComputeAnswer.oneofGroups_);
};
goog.inherits(proto.session.ComputeAnswer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.ComputeAnswer.displayName = 'proto.session.ComputeAnswer';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.session.ComputeAnswer.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.session.ComputeAnswer.ComputeanswerCase = {
  COMPUTEANSWER_NOT_SET: 0,
  NUMBER: 1,
  PATHS: 2,
  CENTRALITY: 3,
  CLUSTERS: 4,
  CLUSTERSIZES: 5
};

/**
 * @return {proto.session.ComputeAnswer.ComputeanswerCase}
 */
proto.session.ComputeAnswer.prototype.getComputeanswerCase = function() {
  return /** @type {proto.session.ComputeAnswer.ComputeanswerCase} */(jspb.Message.computeOneofCase(this, proto.session.ComputeAnswer.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.ComputeAnswer.prototype.toObject = function(opt_includeInstance) {
  return proto.session.ComputeAnswer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.ComputeAnswer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.ComputeAnswer.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paths: (f = msg.getPaths()) && proto.session.Paths.toObject(includeInstance, f),
    centrality: (f = msg.getCentrality()) && proto.session.Centrality.toObject(includeInstance, f),
    clusters: (f = msg.getClusters()) && proto.session.Clusters.toObject(includeInstance, f),
    clustersizes: (f = msg.getClustersizes()) && proto.session.ClusterSizes.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.ComputeAnswer}
 */
proto.session.ComputeAnswer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.ComputeAnswer;
  return proto.session.ComputeAnswer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.ComputeAnswer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.ComputeAnswer}
 */
proto.session.ComputeAnswer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 2:
      var value = new proto.session.Paths;
      reader.readMessage(value,proto.session.Paths.deserializeBinaryFromReader);
      msg.setPaths(value);
      break;
    case 3:
      var value = new proto.session.Centrality;
      reader.readMessage(value,proto.session.Centrality.deserializeBinaryFromReader);
      msg.setCentrality(value);
      break;
    case 4:
      var value = new proto.session.Clusters;
      reader.readMessage(value,proto.session.Clusters.deserializeBinaryFromReader);
      msg.setClusters(value);
      break;
    case 5:
      var value = new proto.session.ClusterSizes;
      reader.readMessage(value,proto.session.ClusterSizes.deserializeBinaryFromReader);
      msg.setClustersizes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.ComputeAnswer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.ComputeAnswer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.ComputeAnswer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.ComputeAnswer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPaths();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.session.Paths.serializeBinaryToWriter
    );
  }
  f = message.getCentrality();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.session.Centrality.serializeBinaryToWriter
    );
  }
  f = message.getClusters();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.session.Clusters.serializeBinaryToWriter
    );
  }
  f = message.getClustersizes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.session.ClusterSizes.serializeBinaryToWriter
    );
  }
};


/**
 * optional string number = 1;
 * @return {string}
 */
proto.session.ComputeAnswer.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.ComputeAnswer.prototype.setNumber = function(value) {
  jspb.Message.setOneofField(this, 1, proto.session.ComputeAnswer.oneofGroups_[0], value);
};


proto.session.ComputeAnswer.prototype.clearNumber = function() {
  jspb.Message.setOneofField(this, 1, proto.session.ComputeAnswer.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.ComputeAnswer.prototype.hasNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Paths paths = 2;
 * @return {?proto.session.Paths}
 */
proto.session.ComputeAnswer.prototype.getPaths = function() {
  return /** @type{?proto.session.Paths} */ (
    jspb.Message.getWrapperField(this, proto.session.Paths, 2));
};


/** @param {?proto.session.Paths|undefined} value */
proto.session.ComputeAnswer.prototype.setPaths = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.session.ComputeAnswer.oneofGroups_[0], value);
};


proto.session.ComputeAnswer.prototype.clearPaths = function() {
  this.setPaths(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.ComputeAnswer.prototype.hasPaths = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Centrality centrality = 3;
 * @return {?proto.session.Centrality}
 */
proto.session.ComputeAnswer.prototype.getCentrality = function() {
  return /** @type{?proto.session.Centrality} */ (
    jspb.Message.getWrapperField(this, proto.session.Centrality, 3));
};


/** @param {?proto.session.Centrality|undefined} value */
proto.session.ComputeAnswer.prototype.setCentrality = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.session.ComputeAnswer.oneofGroups_[0], value);
};


proto.session.ComputeAnswer.prototype.clearCentrality = function() {
  this.setCentrality(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.ComputeAnswer.prototype.hasCentrality = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Clusters clusters = 4;
 * @return {?proto.session.Clusters}
 */
proto.session.ComputeAnswer.prototype.getClusters = function() {
  return /** @type{?proto.session.Clusters} */ (
    jspb.Message.getWrapperField(this, proto.session.Clusters, 4));
};


/** @param {?proto.session.Clusters|undefined} value */
proto.session.ComputeAnswer.prototype.setClusters = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.session.ComputeAnswer.oneofGroups_[0], value);
};


proto.session.ComputeAnswer.prototype.clearClusters = function() {
  this.setClusters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.ComputeAnswer.prototype.hasClusters = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ClusterSizes clusterSizes = 5;
 * @return {?proto.session.ClusterSizes}
 */
proto.session.ComputeAnswer.prototype.getClustersizes = function() {
  return /** @type{?proto.session.ClusterSizes} */ (
    jspb.Message.getWrapperField(this, proto.session.ClusterSizes, 5));
};


/** @param {?proto.session.ClusterSizes|undefined} value */
proto.session.ComputeAnswer.prototype.setClustersizes = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.session.ComputeAnswer.oneofGroups_[0], value);
};


proto.session.ComputeAnswer.prototype.clearClustersizes = function() {
  this.setClustersizes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.ComputeAnswer.prototype.hasClustersizes = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Paths = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.session.Paths.repeatedFields_, null);
};
goog.inherits(proto.session.Paths, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Paths.displayName = 'proto.session.Paths';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.session.Paths.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Paths.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Paths.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Paths} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Paths.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathsList: jspb.Message.toObjectList(msg.getPathsList(),
    proto.session.ConceptIds.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Paths}
 */
proto.session.Paths.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Paths;
  return proto.session.Paths.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Paths} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Paths}
 */
proto.session.Paths.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.session.ConceptIds;
      reader.readMessage(value,proto.session.ConceptIds.deserializeBinaryFromReader);
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Paths.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Paths.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Paths} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Paths.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.session.ConceptIds.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConceptIds paths = 1;
 * @return {!Array.<!proto.session.ConceptIds>}
 */
proto.session.Paths.prototype.getPathsList = function() {
  return /** @type{!Array.<!proto.session.ConceptIds>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.session.ConceptIds, 1));
};


/** @param {!Array.<!proto.session.ConceptIds>} value */
proto.session.Paths.prototype.setPathsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.session.ConceptIds=} opt_value
 * @param {number=} opt_index
 * @return {!proto.session.ConceptIds}
 */
proto.session.Paths.prototype.addPaths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.session.ConceptIds, opt_index);
};


proto.session.Paths.prototype.clearPathsList = function() {
  this.setPathsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Centrality = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Centrality, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Centrality.displayName = 'proto.session.Centrality';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Centrality.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Centrality.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Centrality} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Centrality.toObject = function(includeInstance, msg) {
  var f, obj = {
    centralityMap: (f = msg.getCentralityMap()) ? f.toObject(includeInstance, proto.session.ConceptIds.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Centrality}
 */
proto.session.Centrality.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Centrality;
  return proto.session.Centrality.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Centrality} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Centrality}
 */
proto.session.Centrality.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getCentralityMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt64, jspb.BinaryReader.prototype.readMessage, proto.session.ConceptIds.deserializeBinaryFromReader);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Centrality.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Centrality.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Centrality} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Centrality.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCentralityMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeInt64, jspb.BinaryWriter.prototype.writeMessage, proto.session.ConceptIds.serializeBinaryToWriter);
  }
};


/**
 * map<int64, ConceptIds> centrality = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.session.ConceptIds>}
 */
proto.session.Centrality.prototype.getCentralityMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.session.ConceptIds>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.session.ConceptIds));
};


proto.session.Centrality.prototype.clearCentralityMap = function() {
  this.getCentralityMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Clusters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.session.Clusters.repeatedFields_, null);
};
goog.inherits(proto.session.Clusters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Clusters.displayName = 'proto.session.Clusters';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.session.Clusters.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Clusters.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Clusters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Clusters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Clusters.toObject = function(includeInstance, msg) {
  var f, obj = {
    clustersList: jspb.Message.toObjectList(msg.getClustersList(),
    proto.session.ConceptIds.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Clusters}
 */
proto.session.Clusters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Clusters;
  return proto.session.Clusters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Clusters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Clusters}
 */
proto.session.Clusters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.session.ConceptIds;
      reader.readMessage(value,proto.session.ConceptIds.deserializeBinaryFromReader);
      msg.addClusters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Clusters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Clusters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Clusters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Clusters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClustersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.session.ConceptIds.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ConceptIds clusters = 1;
 * @return {!Array.<!proto.session.ConceptIds>}
 */
proto.session.Clusters.prototype.getClustersList = function() {
  return /** @type{!Array.<!proto.session.ConceptIds>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.session.ConceptIds, 1));
};


/** @param {!Array.<!proto.session.ConceptIds>} value */
proto.session.Clusters.prototype.setClustersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.session.ConceptIds=} opt_value
 * @param {number=} opt_index
 * @return {!proto.session.ConceptIds}
 */
proto.session.Clusters.prototype.addClusters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.session.ConceptIds, opt_index);
};


proto.session.Clusters.prototype.clearClustersList = function() {
  this.setClustersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.ClusterSizes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.session.ClusterSizes.repeatedFields_, null);
};
goog.inherits(proto.session.ClusterSizes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.ClusterSizes.displayName = 'proto.session.ClusterSizes';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.session.ClusterSizes.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.ClusterSizes.prototype.toObject = function(opt_includeInstance) {
  return proto.session.ClusterSizes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.ClusterSizes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.ClusterSizes.toObject = function(includeInstance, msg) {
  var f, obj = {
    clustersizesList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.ClusterSizes}
 */
proto.session.ClusterSizes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.ClusterSizes;
  return proto.session.ClusterSizes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.ClusterSizes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.ClusterSizes}
 */
proto.session.ClusterSizes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array.<number>} */ (reader.readPackedInt64());
      msg.setClustersizesList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.ClusterSizes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.ClusterSizes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.ClusterSizes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.ClusterSizes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClustersizesList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 clusterSizes = 1;
 * @return {!Array.<number>}
 */
proto.session.ClusterSizes.prototype.getClustersizesList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.session.ClusterSizes.prototype.setClustersizesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.session.ClusterSizes.prototype.addClustersizes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.session.ClusterSizes.prototype.clearClustersizesList = function() {
  this.setClustersizesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.ConceptIds = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.session.ConceptIds.repeatedFields_, null);
};
goog.inherits(proto.session.ConceptIds, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.ConceptIds.displayName = 'proto.session.ConceptIds';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.session.ConceptIds.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.ConceptIds.prototype.toObject = function(opt_includeInstance) {
  return proto.session.ConceptIds.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.ConceptIds} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.ConceptIds.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.ConceptIds}
 */
proto.session.ConceptIds.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.ConceptIds;
  return proto.session.ConceptIds.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.ConceptIds} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.ConceptIds}
 */
proto.session.ConceptIds.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.ConceptIds.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.ConceptIds.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.ConceptIds} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.ConceptIds.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ids = 1;
 * @return {!Array.<string>}
 */
proto.session.ConceptIds.prototype.getIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.session.ConceptIds.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.session.ConceptIds.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.session.ConceptIds.prototype.clearIdsList = function() {
  this.setIdsList([]);
};


goog.object.extend(exports, proto.session);
