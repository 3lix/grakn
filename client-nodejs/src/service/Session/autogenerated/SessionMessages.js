/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Concept_pb = require('./Concept_pb.js');
var Answer_pb = require('./Answer_pb.js');
goog.exportSymbol('proto.session.Transaction', null, global);
goog.exportSymbol('proto.session.Transaction.Commit', null, global);
goog.exportSymbol('proto.session.Transaction.Commit.Req', null, global);
goog.exportSymbol('proto.session.Transaction.Commit.Res', null, global);
goog.exportSymbol('proto.session.Transaction.ConceptMethod', null, global);
goog.exportSymbol('proto.session.Transaction.ConceptMethod.Req', null, global);
goog.exportSymbol('proto.session.Transaction.ConceptMethod.Res', null, global);
goog.exportSymbol('proto.session.Transaction.GetAttributes', null, global);
goog.exportSymbol('proto.session.Transaction.GetAttributes.Iter', null, global);
goog.exportSymbol('proto.session.Transaction.GetAttributes.Iter.Res', null, global);
goog.exportSymbol('proto.session.Transaction.GetAttributes.Req', null, global);
goog.exportSymbol('proto.session.Transaction.GetConcept', null, global);
goog.exportSymbol('proto.session.Transaction.GetConcept.Req', null, global);
goog.exportSymbol('proto.session.Transaction.GetConcept.Res', null, global);
goog.exportSymbol('proto.session.Transaction.GetSchemaConcept', null, global);
goog.exportSymbol('proto.session.Transaction.GetSchemaConcept.Req', null, global);
goog.exportSymbol('proto.session.Transaction.GetSchemaConcept.Res', null, global);
goog.exportSymbol('proto.session.Transaction.Iter', null, global);
goog.exportSymbol('proto.session.Transaction.Iter.Req', null, global);
goog.exportSymbol('proto.session.Transaction.Iter.Res', null, global);
goog.exportSymbol('proto.session.Transaction.Open', null, global);
goog.exportSymbol('proto.session.Transaction.Open.Req', null, global);
goog.exportSymbol('proto.session.Transaction.Open.Res', null, global);
goog.exportSymbol('proto.session.Transaction.PutAttributeType', null, global);
goog.exportSymbol('proto.session.Transaction.PutAttributeType.Req', null, global);
goog.exportSymbol('proto.session.Transaction.PutAttributeType.Res', null, global);
goog.exportSymbol('proto.session.Transaction.PutEntityType', null, global);
goog.exportSymbol('proto.session.Transaction.PutEntityType.Req', null, global);
goog.exportSymbol('proto.session.Transaction.PutEntityType.Res', null, global);
goog.exportSymbol('proto.session.Transaction.PutRelationType', null, global);
goog.exportSymbol('proto.session.Transaction.PutRelationType.Req', null, global);
goog.exportSymbol('proto.session.Transaction.PutRelationType.Res', null, global);
goog.exportSymbol('proto.session.Transaction.PutRole', null, global);
goog.exportSymbol('proto.session.Transaction.PutRole.Req', null, global);
goog.exportSymbol('proto.session.Transaction.PutRole.Res', null, global);
goog.exportSymbol('proto.session.Transaction.PutRule', null, global);
goog.exportSymbol('proto.session.Transaction.PutRule.Req', null, global);
goog.exportSymbol('proto.session.Transaction.PutRule.Res', null, global);
goog.exportSymbol('proto.session.Transaction.Query', null, global);
goog.exportSymbol('proto.session.Transaction.Query.Iter', null, global);
goog.exportSymbol('proto.session.Transaction.Query.Iter.Res', null, global);
goog.exportSymbol('proto.session.Transaction.Query.Req', null, global);
goog.exportSymbol('proto.session.Transaction.Req', null, global);
goog.exportSymbol('proto.session.Transaction.Res', null, global);
goog.exportSymbol('proto.session.Transaction.Type', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.displayName = 'proto.session.Transaction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction}
 */
proto.session.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction;
  return proto.session.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction}
 */
proto.session.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.session.Transaction.Type = {
  READ: 0,
  WRITE: 1,
  BATCH: 2
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.session.Transaction.Req.oneofGroups_);
};
goog.inherits(proto.session.Transaction.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Req.displayName = 'proto.session.Transaction.Req';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.session.Transaction.Req.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.session.Transaction.Req.ReqCase = {
  REQ_NOT_SET: 0,
  OPEN_REQ: 1,
  COMMIT_REQ: 2,
  QUERY_REQ: 3,
  ITERATE_REQ: 4,
  GETSCHEMACONCEPT_REQ: 5,
  GETCONCEPT_REQ: 6,
  GETATTRIBUTES_REQ: 7,
  PUTENTITYTYPE_REQ: 8,
  PUTATTRIBUTETYPE_REQ: 9,
  PUTRELATIONTYPE_REQ: 10,
  PUTROLE_REQ: 11,
  PUTRULE_REQ: 12,
  CONCEPTMETHOD_REQ: 13
};

/**
 * @return {proto.session.Transaction.Req.ReqCase}
 */
proto.session.Transaction.Req.prototype.getReqCase = function() {
  return /** @type {proto.session.Transaction.Req.ReqCase} */(jspb.Message.computeOneofCase(this, proto.session.Transaction.Req.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    openReq: (f = msg.getOpenReq()) && proto.session.Transaction.Open.Req.toObject(includeInstance, f),
    commitReq: (f = msg.getCommitReq()) && proto.session.Transaction.Commit.Req.toObject(includeInstance, f),
    queryReq: (f = msg.getQueryReq()) && proto.session.Transaction.Query.Req.toObject(includeInstance, f),
    iterateReq: (f = msg.getIterateReq()) && proto.session.Transaction.Iter.Req.toObject(includeInstance, f),
    getschemaconceptReq: (f = msg.getGetschemaconceptReq()) && proto.session.Transaction.GetSchemaConcept.Req.toObject(includeInstance, f),
    getconceptReq: (f = msg.getGetconceptReq()) && proto.session.Transaction.GetConcept.Req.toObject(includeInstance, f),
    getattributesReq: (f = msg.getGetattributesReq()) && proto.session.Transaction.GetAttributes.Req.toObject(includeInstance, f),
    putentitytypeReq: (f = msg.getPutentitytypeReq()) && proto.session.Transaction.PutEntityType.Req.toObject(includeInstance, f),
    putattributetypeReq: (f = msg.getPutattributetypeReq()) && proto.session.Transaction.PutAttributeType.Req.toObject(includeInstance, f),
    putrelationtypeReq: (f = msg.getPutrelationtypeReq()) && proto.session.Transaction.PutRelationType.Req.toObject(includeInstance, f),
    putroleReq: (f = msg.getPutroleReq()) && proto.session.Transaction.PutRole.Req.toObject(includeInstance, f),
    putruleReq: (f = msg.getPutruleReq()) && proto.session.Transaction.PutRule.Req.toObject(includeInstance, f),
    conceptmethodReq: (f = msg.getConceptmethodReq()) && proto.session.Transaction.ConceptMethod.Req.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Req}
 */
proto.session.Transaction.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Req;
  return proto.session.Transaction.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Req}
 */
proto.session.Transaction.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.session.Transaction.Open.Req;
      reader.readMessage(value,proto.session.Transaction.Open.Req.deserializeBinaryFromReader);
      msg.setOpenReq(value);
      break;
    case 2:
      var value = new proto.session.Transaction.Commit.Req;
      reader.readMessage(value,proto.session.Transaction.Commit.Req.deserializeBinaryFromReader);
      msg.setCommitReq(value);
      break;
    case 3:
      var value = new proto.session.Transaction.Query.Req;
      reader.readMessage(value,proto.session.Transaction.Query.Req.deserializeBinaryFromReader);
      msg.setQueryReq(value);
      break;
    case 4:
      var value = new proto.session.Transaction.Iter.Req;
      reader.readMessage(value,proto.session.Transaction.Iter.Req.deserializeBinaryFromReader);
      msg.setIterateReq(value);
      break;
    case 5:
      var value = new proto.session.Transaction.GetSchemaConcept.Req;
      reader.readMessage(value,proto.session.Transaction.GetSchemaConcept.Req.deserializeBinaryFromReader);
      msg.setGetschemaconceptReq(value);
      break;
    case 6:
      var value = new proto.session.Transaction.GetConcept.Req;
      reader.readMessage(value,proto.session.Transaction.GetConcept.Req.deserializeBinaryFromReader);
      msg.setGetconceptReq(value);
      break;
    case 7:
      var value = new proto.session.Transaction.GetAttributes.Req;
      reader.readMessage(value,proto.session.Transaction.GetAttributes.Req.deserializeBinaryFromReader);
      msg.setGetattributesReq(value);
      break;
    case 8:
      var value = new proto.session.Transaction.PutEntityType.Req;
      reader.readMessage(value,proto.session.Transaction.PutEntityType.Req.deserializeBinaryFromReader);
      msg.setPutentitytypeReq(value);
      break;
    case 9:
      var value = new proto.session.Transaction.PutAttributeType.Req;
      reader.readMessage(value,proto.session.Transaction.PutAttributeType.Req.deserializeBinaryFromReader);
      msg.setPutattributetypeReq(value);
      break;
    case 10:
      var value = new proto.session.Transaction.PutRelationType.Req;
      reader.readMessage(value,proto.session.Transaction.PutRelationType.Req.deserializeBinaryFromReader);
      msg.setPutrelationtypeReq(value);
      break;
    case 11:
      var value = new proto.session.Transaction.PutRole.Req;
      reader.readMessage(value,proto.session.Transaction.PutRole.Req.deserializeBinaryFromReader);
      msg.setPutroleReq(value);
      break;
    case 12:
      var value = new proto.session.Transaction.PutRule.Req;
      reader.readMessage(value,proto.session.Transaction.PutRule.Req.deserializeBinaryFromReader);
      msg.setPutruleReq(value);
      break;
    case 13:
      var value = new proto.session.Transaction.ConceptMethod.Req;
      reader.readMessage(value,proto.session.Transaction.ConceptMethod.Req.deserializeBinaryFromReader);
      msg.setConceptmethodReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenReq();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.session.Transaction.Open.Req.serializeBinaryToWriter
    );
  }
  f = message.getCommitReq();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.session.Transaction.Commit.Req.serializeBinaryToWriter
    );
  }
  f = message.getQueryReq();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.session.Transaction.Query.Req.serializeBinaryToWriter
    );
  }
  f = message.getIterateReq();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.session.Transaction.Iter.Req.serializeBinaryToWriter
    );
  }
  f = message.getGetschemaconceptReq();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.session.Transaction.GetSchemaConcept.Req.serializeBinaryToWriter
    );
  }
  f = message.getGetconceptReq();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.session.Transaction.GetConcept.Req.serializeBinaryToWriter
    );
  }
  f = message.getGetattributesReq();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.session.Transaction.GetAttributes.Req.serializeBinaryToWriter
    );
  }
  f = message.getPutentitytypeReq();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.session.Transaction.PutEntityType.Req.serializeBinaryToWriter
    );
  }
  f = message.getPutattributetypeReq();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.session.Transaction.PutAttributeType.Req.serializeBinaryToWriter
    );
  }
  f = message.getPutrelationtypeReq();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.session.Transaction.PutRelationType.Req.serializeBinaryToWriter
    );
  }
  f = message.getPutroleReq();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.session.Transaction.PutRole.Req.serializeBinaryToWriter
    );
  }
  f = message.getPutruleReq();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.session.Transaction.PutRule.Req.serializeBinaryToWriter
    );
  }
  f = message.getConceptmethodReq();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.session.Transaction.ConceptMethod.Req.serializeBinaryToWriter
    );
  }
};


/**
 * optional Open.Req open_req = 1;
 * @return {?proto.session.Transaction.Open.Req}
 */
proto.session.Transaction.Req.prototype.getOpenReq = function() {
  return /** @type{?proto.session.Transaction.Open.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.Open.Req, 1));
};


/** @param {?proto.session.Transaction.Open.Req|undefined} value */
proto.session.Transaction.Req.prototype.setOpenReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearOpenReq = function() {
  this.setOpenReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasOpenReq = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Commit.Req commit_req = 2;
 * @return {?proto.session.Transaction.Commit.Req}
 */
proto.session.Transaction.Req.prototype.getCommitReq = function() {
  return /** @type{?proto.session.Transaction.Commit.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.Commit.Req, 2));
};


/** @param {?proto.session.Transaction.Commit.Req|undefined} value */
proto.session.Transaction.Req.prototype.setCommitReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearCommitReq = function() {
  this.setCommitReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasCommitReq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Query.Req query_req = 3;
 * @return {?proto.session.Transaction.Query.Req}
 */
proto.session.Transaction.Req.prototype.getQueryReq = function() {
  return /** @type{?proto.session.Transaction.Query.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.Query.Req, 3));
};


/** @param {?proto.session.Transaction.Query.Req|undefined} value */
proto.session.Transaction.Req.prototype.setQueryReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearQueryReq = function() {
  this.setQueryReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasQueryReq = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Iter.Req iterate_req = 4;
 * @return {?proto.session.Transaction.Iter.Req}
 */
proto.session.Transaction.Req.prototype.getIterateReq = function() {
  return /** @type{?proto.session.Transaction.Iter.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.Iter.Req, 4));
};


/** @param {?proto.session.Transaction.Iter.Req|undefined} value */
proto.session.Transaction.Req.prototype.setIterateReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearIterateReq = function() {
  this.setIterateReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasIterateReq = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GetSchemaConcept.Req getSchemaConcept_req = 5;
 * @return {?proto.session.Transaction.GetSchemaConcept.Req}
 */
proto.session.Transaction.Req.prototype.getGetschemaconceptReq = function() {
  return /** @type{?proto.session.Transaction.GetSchemaConcept.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.GetSchemaConcept.Req, 5));
};


/** @param {?proto.session.Transaction.GetSchemaConcept.Req|undefined} value */
proto.session.Transaction.Req.prototype.setGetschemaconceptReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearGetschemaconceptReq = function() {
  this.setGetschemaconceptReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasGetschemaconceptReq = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GetConcept.Req getConcept_req = 6;
 * @return {?proto.session.Transaction.GetConcept.Req}
 */
proto.session.Transaction.Req.prototype.getGetconceptReq = function() {
  return /** @type{?proto.session.Transaction.GetConcept.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.GetConcept.Req, 6));
};


/** @param {?proto.session.Transaction.GetConcept.Req|undefined} value */
proto.session.Transaction.Req.prototype.setGetconceptReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearGetconceptReq = function() {
  this.setGetconceptReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasGetconceptReq = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional GetAttributes.Req getAttributes_req = 7;
 * @return {?proto.session.Transaction.GetAttributes.Req}
 */
proto.session.Transaction.Req.prototype.getGetattributesReq = function() {
  return /** @type{?proto.session.Transaction.GetAttributes.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.GetAttributes.Req, 7));
};


/** @param {?proto.session.Transaction.GetAttributes.Req|undefined} value */
proto.session.Transaction.Req.prototype.setGetattributesReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearGetattributesReq = function() {
  this.setGetattributesReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasGetattributesReq = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PutEntityType.Req putEntityType_req = 8;
 * @return {?proto.session.Transaction.PutEntityType.Req}
 */
proto.session.Transaction.Req.prototype.getPutentitytypeReq = function() {
  return /** @type{?proto.session.Transaction.PutEntityType.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutEntityType.Req, 8));
};


/** @param {?proto.session.Transaction.PutEntityType.Req|undefined} value */
proto.session.Transaction.Req.prototype.setPutentitytypeReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearPutentitytypeReq = function() {
  this.setPutentitytypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasPutentitytypeReq = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PutAttributeType.Req putAttributeType_req = 9;
 * @return {?proto.session.Transaction.PutAttributeType.Req}
 */
proto.session.Transaction.Req.prototype.getPutattributetypeReq = function() {
  return /** @type{?proto.session.Transaction.PutAttributeType.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutAttributeType.Req, 9));
};


/** @param {?proto.session.Transaction.PutAttributeType.Req|undefined} value */
proto.session.Transaction.Req.prototype.setPutattributetypeReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearPutattributetypeReq = function() {
  this.setPutattributetypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasPutattributetypeReq = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PutRelationType.Req putRelationType_req = 10;
 * @return {?proto.session.Transaction.PutRelationType.Req}
 */
proto.session.Transaction.Req.prototype.getPutrelationtypeReq = function() {
  return /** @type{?proto.session.Transaction.PutRelationType.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutRelationType.Req, 10));
};


/** @param {?proto.session.Transaction.PutRelationType.Req|undefined} value */
proto.session.Transaction.Req.prototype.setPutrelationtypeReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearPutrelationtypeReq = function() {
  this.setPutrelationtypeReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasPutrelationtypeReq = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PutRole.Req putRole_req = 11;
 * @return {?proto.session.Transaction.PutRole.Req}
 */
proto.session.Transaction.Req.prototype.getPutroleReq = function() {
  return /** @type{?proto.session.Transaction.PutRole.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutRole.Req, 11));
};


/** @param {?proto.session.Transaction.PutRole.Req|undefined} value */
proto.session.Transaction.Req.prototype.setPutroleReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearPutroleReq = function() {
  this.setPutroleReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasPutroleReq = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PutRule.Req putRule_req = 12;
 * @return {?proto.session.Transaction.PutRule.Req}
 */
proto.session.Transaction.Req.prototype.getPutruleReq = function() {
  return /** @type{?proto.session.Transaction.PutRule.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutRule.Req, 12));
};


/** @param {?proto.session.Transaction.PutRule.Req|undefined} value */
proto.session.Transaction.Req.prototype.setPutruleReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearPutruleReq = function() {
  this.setPutruleReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasPutruleReq = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ConceptMethod.Req conceptMethod_req = 13;
 * @return {?proto.session.Transaction.ConceptMethod.Req}
 */
proto.session.Transaction.Req.prototype.getConceptmethodReq = function() {
  return /** @type{?proto.session.Transaction.ConceptMethod.Req} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.ConceptMethod.Req, 13));
};


/** @param {?proto.session.Transaction.ConceptMethod.Req|undefined} value */
proto.session.Transaction.Req.prototype.setConceptmethodReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.session.Transaction.Req.oneofGroups_[0], value);
};


proto.session.Transaction.Req.prototype.clearConceptmethodReq = function() {
  this.setConceptmethodReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Req.prototype.hasConceptmethodReq = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.session.Transaction.Res.oneofGroups_);
};
goog.inherits(proto.session.Transaction.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Res.displayName = 'proto.session.Transaction.Res';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.session.Transaction.Res.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13]];

/**
 * @enum {number}
 */
proto.session.Transaction.Res.ResCase = {
  RES_NOT_SET: 0,
  OPEN_RES: 1,
  COMMIT_RES: 2,
  QUERY_ITER: 3,
  ITERATE_RES: 4,
  GETSCHEMACONCEPT_RES: 5,
  GETCONCEPT_RES: 6,
  GETATTRIBUTES_ITER: 7,
  PUTENTITYTYPE_RES: 8,
  PUTATTRIBUTETYPE_RES: 9,
  PUTRELATIONTYPE_RES: 10,
  PUTROLE_RES: 11,
  PUTRULE_RES: 12,
  CONCEPTMETHOD_RES: 13
};

/**
 * @return {proto.session.Transaction.Res.ResCase}
 */
proto.session.Transaction.Res.prototype.getResCase = function() {
  return /** @type {proto.session.Transaction.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.session.Transaction.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    openRes: (f = msg.getOpenRes()) && proto.session.Transaction.Open.Res.toObject(includeInstance, f),
    commitRes: (f = msg.getCommitRes()) && proto.session.Transaction.Commit.Res.toObject(includeInstance, f),
    queryIter: (f = msg.getQueryIter()) && proto.session.Transaction.Query.Iter.toObject(includeInstance, f),
    iterateRes: (f = msg.getIterateRes()) && proto.session.Transaction.Iter.Res.toObject(includeInstance, f),
    getschemaconceptRes: (f = msg.getGetschemaconceptRes()) && proto.session.Transaction.GetSchemaConcept.Res.toObject(includeInstance, f),
    getconceptRes: (f = msg.getGetconceptRes()) && proto.session.Transaction.GetConcept.Res.toObject(includeInstance, f),
    getattributesIter: (f = msg.getGetattributesIter()) && proto.session.Transaction.GetAttributes.Iter.toObject(includeInstance, f),
    putentitytypeRes: (f = msg.getPutentitytypeRes()) && proto.session.Transaction.PutEntityType.Res.toObject(includeInstance, f),
    putattributetypeRes: (f = msg.getPutattributetypeRes()) && proto.session.Transaction.PutAttributeType.Res.toObject(includeInstance, f),
    putrelationtypeRes: (f = msg.getPutrelationtypeRes()) && proto.session.Transaction.PutRelationType.Res.toObject(includeInstance, f),
    putroleRes: (f = msg.getPutroleRes()) && proto.session.Transaction.PutRole.Res.toObject(includeInstance, f),
    putruleRes: (f = msg.getPutruleRes()) && proto.session.Transaction.PutRule.Res.toObject(includeInstance, f),
    conceptmethodRes: (f = msg.getConceptmethodRes()) && proto.session.Transaction.ConceptMethod.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Res}
 */
proto.session.Transaction.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Res;
  return proto.session.Transaction.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Res}
 */
proto.session.Transaction.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.session.Transaction.Open.Res;
      reader.readMessage(value,proto.session.Transaction.Open.Res.deserializeBinaryFromReader);
      msg.setOpenRes(value);
      break;
    case 2:
      var value = new proto.session.Transaction.Commit.Res;
      reader.readMessage(value,proto.session.Transaction.Commit.Res.deserializeBinaryFromReader);
      msg.setCommitRes(value);
      break;
    case 3:
      var value = new proto.session.Transaction.Query.Iter;
      reader.readMessage(value,proto.session.Transaction.Query.Iter.deserializeBinaryFromReader);
      msg.setQueryIter(value);
      break;
    case 4:
      var value = new proto.session.Transaction.Iter.Res;
      reader.readMessage(value,proto.session.Transaction.Iter.Res.deserializeBinaryFromReader);
      msg.setIterateRes(value);
      break;
    case 5:
      var value = new proto.session.Transaction.GetSchemaConcept.Res;
      reader.readMessage(value,proto.session.Transaction.GetSchemaConcept.Res.deserializeBinaryFromReader);
      msg.setGetschemaconceptRes(value);
      break;
    case 6:
      var value = new proto.session.Transaction.GetConcept.Res;
      reader.readMessage(value,proto.session.Transaction.GetConcept.Res.deserializeBinaryFromReader);
      msg.setGetconceptRes(value);
      break;
    case 7:
      var value = new proto.session.Transaction.GetAttributes.Iter;
      reader.readMessage(value,proto.session.Transaction.GetAttributes.Iter.deserializeBinaryFromReader);
      msg.setGetattributesIter(value);
      break;
    case 8:
      var value = new proto.session.Transaction.PutEntityType.Res;
      reader.readMessage(value,proto.session.Transaction.PutEntityType.Res.deserializeBinaryFromReader);
      msg.setPutentitytypeRes(value);
      break;
    case 9:
      var value = new proto.session.Transaction.PutAttributeType.Res;
      reader.readMessage(value,proto.session.Transaction.PutAttributeType.Res.deserializeBinaryFromReader);
      msg.setPutattributetypeRes(value);
      break;
    case 10:
      var value = new proto.session.Transaction.PutRelationType.Res;
      reader.readMessage(value,proto.session.Transaction.PutRelationType.Res.deserializeBinaryFromReader);
      msg.setPutrelationtypeRes(value);
      break;
    case 11:
      var value = new proto.session.Transaction.PutRole.Res;
      reader.readMessage(value,proto.session.Transaction.PutRole.Res.deserializeBinaryFromReader);
      msg.setPutroleRes(value);
      break;
    case 12:
      var value = new proto.session.Transaction.PutRule.Res;
      reader.readMessage(value,proto.session.Transaction.PutRule.Res.deserializeBinaryFromReader);
      msg.setPutruleRes(value);
      break;
    case 13:
      var value = new proto.session.Transaction.ConceptMethod.Res;
      reader.readMessage(value,proto.session.Transaction.ConceptMethod.Res.deserializeBinaryFromReader);
      msg.setConceptmethodRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOpenRes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.session.Transaction.Open.Res.serializeBinaryToWriter
    );
  }
  f = message.getCommitRes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.session.Transaction.Commit.Res.serializeBinaryToWriter
    );
  }
  f = message.getQueryIter();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.session.Transaction.Query.Iter.serializeBinaryToWriter
    );
  }
  f = message.getIterateRes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.session.Transaction.Iter.Res.serializeBinaryToWriter
    );
  }
  f = message.getGetschemaconceptRes();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.session.Transaction.GetSchemaConcept.Res.serializeBinaryToWriter
    );
  }
  f = message.getGetconceptRes();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.session.Transaction.GetConcept.Res.serializeBinaryToWriter
    );
  }
  f = message.getGetattributesIter();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.session.Transaction.GetAttributes.Iter.serializeBinaryToWriter
    );
  }
  f = message.getPutentitytypeRes();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.session.Transaction.PutEntityType.Res.serializeBinaryToWriter
    );
  }
  f = message.getPutattributetypeRes();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.session.Transaction.PutAttributeType.Res.serializeBinaryToWriter
    );
  }
  f = message.getPutrelationtypeRes();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.session.Transaction.PutRelationType.Res.serializeBinaryToWriter
    );
  }
  f = message.getPutroleRes();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.session.Transaction.PutRole.Res.serializeBinaryToWriter
    );
  }
  f = message.getPutruleRes();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.session.Transaction.PutRule.Res.serializeBinaryToWriter
    );
  }
  f = message.getConceptmethodRes();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.session.Transaction.ConceptMethod.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional Open.Res open_res = 1;
 * @return {?proto.session.Transaction.Open.Res}
 */
proto.session.Transaction.Res.prototype.getOpenRes = function() {
  return /** @type{?proto.session.Transaction.Open.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.Open.Res, 1));
};


/** @param {?proto.session.Transaction.Open.Res|undefined} value */
proto.session.Transaction.Res.prototype.setOpenRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearOpenRes = function() {
  this.setOpenRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasOpenRes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Commit.Res commit_res = 2;
 * @return {?proto.session.Transaction.Commit.Res}
 */
proto.session.Transaction.Res.prototype.getCommitRes = function() {
  return /** @type{?proto.session.Transaction.Commit.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.Commit.Res, 2));
};


/** @param {?proto.session.Transaction.Commit.Res|undefined} value */
proto.session.Transaction.Res.prototype.setCommitRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearCommitRes = function() {
  this.setCommitRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasCommitRes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Query.Iter query_iter = 3;
 * @return {?proto.session.Transaction.Query.Iter}
 */
proto.session.Transaction.Res.prototype.getQueryIter = function() {
  return /** @type{?proto.session.Transaction.Query.Iter} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.Query.Iter, 3));
};


/** @param {?proto.session.Transaction.Query.Iter|undefined} value */
proto.session.Transaction.Res.prototype.setQueryIter = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearQueryIter = function() {
  this.setQueryIter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasQueryIter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Iter.Res iterate_res = 4;
 * @return {?proto.session.Transaction.Iter.Res}
 */
proto.session.Transaction.Res.prototype.getIterateRes = function() {
  return /** @type{?proto.session.Transaction.Iter.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.Iter.Res, 4));
};


/** @param {?proto.session.Transaction.Iter.Res|undefined} value */
proto.session.Transaction.Res.prototype.setIterateRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearIterateRes = function() {
  this.setIterateRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasIterateRes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GetSchemaConcept.Res getSchemaConcept_res = 5;
 * @return {?proto.session.Transaction.GetSchemaConcept.Res}
 */
proto.session.Transaction.Res.prototype.getGetschemaconceptRes = function() {
  return /** @type{?proto.session.Transaction.GetSchemaConcept.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.GetSchemaConcept.Res, 5));
};


/** @param {?proto.session.Transaction.GetSchemaConcept.Res|undefined} value */
proto.session.Transaction.Res.prototype.setGetschemaconceptRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearGetschemaconceptRes = function() {
  this.setGetschemaconceptRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasGetschemaconceptRes = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional GetConcept.Res getConcept_res = 6;
 * @return {?proto.session.Transaction.GetConcept.Res}
 */
proto.session.Transaction.Res.prototype.getGetconceptRes = function() {
  return /** @type{?proto.session.Transaction.GetConcept.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.GetConcept.Res, 6));
};


/** @param {?proto.session.Transaction.GetConcept.Res|undefined} value */
proto.session.Transaction.Res.prototype.setGetconceptRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearGetconceptRes = function() {
  this.setGetconceptRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasGetconceptRes = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional GetAttributes.Iter getAttributes_iter = 7;
 * @return {?proto.session.Transaction.GetAttributes.Iter}
 */
proto.session.Transaction.Res.prototype.getGetattributesIter = function() {
  return /** @type{?proto.session.Transaction.GetAttributes.Iter} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.GetAttributes.Iter, 7));
};


/** @param {?proto.session.Transaction.GetAttributes.Iter|undefined} value */
proto.session.Transaction.Res.prototype.setGetattributesIter = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearGetattributesIter = function() {
  this.setGetattributesIter(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasGetattributesIter = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PutEntityType.Res putEntityType_res = 8;
 * @return {?proto.session.Transaction.PutEntityType.Res}
 */
proto.session.Transaction.Res.prototype.getPutentitytypeRes = function() {
  return /** @type{?proto.session.Transaction.PutEntityType.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutEntityType.Res, 8));
};


/** @param {?proto.session.Transaction.PutEntityType.Res|undefined} value */
proto.session.Transaction.Res.prototype.setPutentitytypeRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearPutentitytypeRes = function() {
  this.setPutentitytypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasPutentitytypeRes = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional PutAttributeType.Res putAttributeType_res = 9;
 * @return {?proto.session.Transaction.PutAttributeType.Res}
 */
proto.session.Transaction.Res.prototype.getPutattributetypeRes = function() {
  return /** @type{?proto.session.Transaction.PutAttributeType.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutAttributeType.Res, 9));
};


/** @param {?proto.session.Transaction.PutAttributeType.Res|undefined} value */
proto.session.Transaction.Res.prototype.setPutattributetypeRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 9, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearPutattributetypeRes = function() {
  this.setPutattributetypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasPutattributetypeRes = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional PutRelationType.Res putRelationType_res = 10;
 * @return {?proto.session.Transaction.PutRelationType.Res}
 */
proto.session.Transaction.Res.prototype.getPutrelationtypeRes = function() {
  return /** @type{?proto.session.Transaction.PutRelationType.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutRelationType.Res, 10));
};


/** @param {?proto.session.Transaction.PutRelationType.Res|undefined} value */
proto.session.Transaction.Res.prototype.setPutrelationtypeRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 10, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearPutrelationtypeRes = function() {
  this.setPutrelationtypeRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasPutrelationtypeRes = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional PutRole.Res putRole_res = 11;
 * @return {?proto.session.Transaction.PutRole.Res}
 */
proto.session.Transaction.Res.prototype.getPutroleRes = function() {
  return /** @type{?proto.session.Transaction.PutRole.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutRole.Res, 11));
};


/** @param {?proto.session.Transaction.PutRole.Res|undefined} value */
proto.session.Transaction.Res.prototype.setPutroleRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 11, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearPutroleRes = function() {
  this.setPutroleRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasPutroleRes = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional PutRule.Res putRule_res = 12;
 * @return {?proto.session.Transaction.PutRule.Res}
 */
proto.session.Transaction.Res.prototype.getPutruleRes = function() {
  return /** @type{?proto.session.Transaction.PutRule.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.PutRule.Res, 12));
};


/** @param {?proto.session.Transaction.PutRule.Res|undefined} value */
proto.session.Transaction.Res.prototype.setPutruleRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 12, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearPutruleRes = function() {
  this.setPutruleRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasPutruleRes = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ConceptMethod.Res conceptMethod_res = 13;
 * @return {?proto.session.Transaction.ConceptMethod.Res}
 */
proto.session.Transaction.Res.prototype.getConceptmethodRes = function() {
  return /** @type{?proto.session.Transaction.ConceptMethod.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.ConceptMethod.Res, 13));
};


/** @param {?proto.session.Transaction.ConceptMethod.Res|undefined} value */
proto.session.Transaction.Res.prototype.setConceptmethodRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 13, proto.session.Transaction.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Res.prototype.clearConceptmethodRes = function() {
  this.setConceptmethodRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Res.prototype.hasConceptmethodRes = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Iter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Iter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Iter.displayName = 'proto.session.Transaction.Iter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Iter.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Iter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Iter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Iter.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Iter}
 */
proto.session.Transaction.Iter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Iter;
  return proto.session.Transaction.Iter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Iter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Iter}
 */
proto.session.Transaction.Iter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Iter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Iter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Iter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Iter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Iter.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Iter.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Iter.Req.displayName = 'proto.session.Transaction.Iter.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Iter.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Iter.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Iter.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Iter.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Iter.Req}
 */
proto.session.Transaction.Iter.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Iter.Req;
  return proto.session.Transaction.Iter.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Iter.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Iter.Req}
 */
proto.session.Transaction.Iter.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Iter.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Iter.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Iter.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Iter.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.session.Transaction.Iter.Req.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.session.Transaction.Iter.Req.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Iter.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.session.Transaction.Iter.Res.oneofGroups_);
};
goog.inherits(proto.session.Transaction.Iter.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Iter.Res.displayName = 'proto.session.Transaction.Iter.Res';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.session.Transaction.Iter.Res.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.session.Transaction.Iter.Res.ResCase = {
  RES_NOT_SET: 0,
  DONE: 1,
  QUERY_ITER_RES: 2,
  GETATTRIBUTES_ITER_RES: 3,
  CONCEPTMETHOD_ITER_RES: 4
};

/**
 * @return {proto.session.Transaction.Iter.Res.ResCase}
 */
proto.session.Transaction.Iter.Res.prototype.getResCase = function() {
  return /** @type {proto.session.Transaction.Iter.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.session.Transaction.Iter.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Iter.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Iter.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Iter.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Iter.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    done: jspb.Message.getFieldWithDefault(msg, 1, false),
    queryIterRes: (f = msg.getQueryIterRes()) && proto.session.Transaction.Query.Iter.Res.toObject(includeInstance, f),
    getattributesIterRes: (f = msg.getGetattributesIterRes()) && proto.session.Transaction.GetAttributes.Iter.Res.toObject(includeInstance, f),
    conceptmethodIterRes: (f = msg.getConceptmethodIterRes()) && Concept_pb.Method.Iter.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Iter.Res}
 */
proto.session.Transaction.Iter.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Iter.Res;
  return proto.session.Transaction.Iter.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Iter.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Iter.Res}
 */
proto.session.Transaction.Iter.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDone(value);
      break;
    case 2:
      var value = new proto.session.Transaction.Query.Iter.Res;
      reader.readMessage(value,proto.session.Transaction.Query.Iter.Res.deserializeBinaryFromReader);
      msg.setQueryIterRes(value);
      break;
    case 3:
      var value = new proto.session.Transaction.GetAttributes.Iter.Res;
      reader.readMessage(value,proto.session.Transaction.GetAttributes.Iter.Res.deserializeBinaryFromReader);
      msg.setGetattributesIterRes(value);
      break;
    case 4:
      var value = new Concept_pb.Method.Iter.Res;
      reader.readMessage(value,Concept_pb.Method.Iter.Res.deserializeBinaryFromReader);
      msg.setConceptmethodIterRes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Iter.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Iter.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Iter.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Iter.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getQueryIterRes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.session.Transaction.Query.Iter.Res.serializeBinaryToWriter
    );
  }
  f = message.getGetattributesIterRes();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.session.Transaction.GetAttributes.Iter.Res.serializeBinaryToWriter
    );
  }
  f = message.getConceptmethodIterRes();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      Concept_pb.Method.Iter.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool done = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.session.Transaction.Iter.Res.prototype.getDone = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.session.Transaction.Iter.Res.prototype.setDone = function(value) {
  jspb.Message.setOneofField(this, 1, proto.session.Transaction.Iter.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Iter.Res.prototype.clearDone = function() {
  jspb.Message.setOneofField(this, 1, proto.session.Transaction.Iter.Res.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Iter.Res.prototype.hasDone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Query.Iter.Res query_iter_res = 2;
 * @return {?proto.session.Transaction.Query.Iter.Res}
 */
proto.session.Transaction.Iter.Res.prototype.getQueryIterRes = function() {
  return /** @type{?proto.session.Transaction.Query.Iter.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.Query.Iter.Res, 2));
};


/** @param {?proto.session.Transaction.Query.Iter.Res|undefined} value */
proto.session.Transaction.Iter.Res.prototype.setQueryIterRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.session.Transaction.Iter.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Iter.Res.prototype.clearQueryIterRes = function() {
  this.setQueryIterRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Iter.Res.prototype.hasQueryIterRes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GetAttributes.Iter.Res getAttributes_iter_res = 3;
 * @return {?proto.session.Transaction.GetAttributes.Iter.Res}
 */
proto.session.Transaction.Iter.Res.prototype.getGetattributesIterRes = function() {
  return /** @type{?proto.session.Transaction.GetAttributes.Iter.Res} */ (
    jspb.Message.getWrapperField(this, proto.session.Transaction.GetAttributes.Iter.Res, 3));
};


/** @param {?proto.session.Transaction.GetAttributes.Iter.Res|undefined} value */
proto.session.Transaction.Iter.Res.prototype.setGetattributesIterRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.session.Transaction.Iter.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Iter.Res.prototype.clearGetattributesIterRes = function() {
  this.setGetattributesIterRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Iter.Res.prototype.hasGetattributesIterRes = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Method.Iter.Res conceptMethod_iter_res = 4;
 * @return {?proto.session.Method.Iter.Res}
 */
proto.session.Transaction.Iter.Res.prototype.getConceptmethodIterRes = function() {
  return /** @type{?proto.session.Method.Iter.Res} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Method.Iter.Res, 4));
};


/** @param {?proto.session.Method.Iter.Res|undefined} value */
proto.session.Transaction.Iter.Res.prototype.setConceptmethodIterRes = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.session.Transaction.Iter.Res.oneofGroups_[0], value);
};


proto.session.Transaction.Iter.Res.prototype.clearConceptmethodIterRes = function() {
  this.setConceptmethodIterRes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Iter.Res.prototype.hasConceptmethodIterRes = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Open = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Open, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Open.displayName = 'proto.session.Transaction.Open';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Open.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Open.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Open} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Open.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Open}
 */
proto.session.Transaction.Open.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Open;
  return proto.session.Transaction.Open.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Open} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Open}
 */
proto.session.Transaction.Open.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Open.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Open.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Open} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Open.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Open.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Open.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Open.Req.displayName = 'proto.session.Transaction.Open.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Open.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Open.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Open.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Open.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyspace: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    username: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Open.Req}
 */
proto.session.Transaction.Open.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Open.Req;
  return proto.session.Transaction.Open.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Open.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Open.Req}
 */
proto.session.Transaction.Open.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyspace(value);
      break;
    case 2:
      var value = /** @type {!proto.session.Transaction.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Open.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Open.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Open.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Open.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyspace();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string keyspace = 1;
 * @return {string}
 */
proto.session.Transaction.Open.Req.prototype.getKeyspace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.Open.Req.prototype.setKeyspace = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Type type = 2;
 * @return {!proto.session.Transaction.Type}
 */
proto.session.Transaction.Open.Req.prototype.getType = function() {
  return /** @type {!proto.session.Transaction.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.session.Transaction.Type} value */
proto.session.Transaction.Open.Req.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.session.Transaction.Open.Req.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.session.Transaction.Open.Req.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.session.Transaction.Open.Req.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.session.Transaction.Open.Req.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Open.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Open.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Open.Res.displayName = 'proto.session.Transaction.Open.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Open.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Open.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Open.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Open.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Open.Res}
 */
proto.session.Transaction.Open.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Open.Res;
  return proto.session.Transaction.Open.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Open.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Open.Res}
 */
proto.session.Transaction.Open.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Open.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Open.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Open.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Open.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Commit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Commit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Commit.displayName = 'proto.session.Transaction.Commit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Commit.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Commit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Commit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Commit.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Commit}
 */
proto.session.Transaction.Commit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Commit;
  return proto.session.Transaction.Commit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Commit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Commit}
 */
proto.session.Transaction.Commit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Commit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Commit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Commit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Commit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Commit.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Commit.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Commit.Req.displayName = 'proto.session.Transaction.Commit.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Commit.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Commit.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Commit.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Commit.Req.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Commit.Req}
 */
proto.session.Transaction.Commit.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Commit.Req;
  return proto.session.Transaction.Commit.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Commit.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Commit.Req}
 */
proto.session.Transaction.Commit.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Commit.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Commit.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Commit.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Commit.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Commit.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Commit.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Commit.Res.displayName = 'proto.session.Transaction.Commit.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Commit.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Commit.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Commit.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Commit.Res.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Commit.Res}
 */
proto.session.Transaction.Commit.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Commit.Res;
  return proto.session.Transaction.Commit.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Commit.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Commit.Res}
 */
proto.session.Transaction.Commit.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Commit.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Commit.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Commit.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Commit.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Query.displayName = 'proto.session.Transaction.Query';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Query.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Query}
 */
proto.session.Transaction.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Query;
  return proto.session.Transaction.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Query}
 */
proto.session.Transaction.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Query.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Query.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Query.Req.displayName = 'proto.session.Transaction.Query.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Query.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Query.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Query.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Query.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    infer: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Query.Req}
 */
proto.session.Transaction.Query.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Query.Req;
  return proto.session.Transaction.Query.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Query.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Query.Req}
 */
proto.session.Transaction.Query.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInfer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Query.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Query.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Query.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Query.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInfer();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.session.Transaction.Query.Req.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.Query.Req.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool infer = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.session.Transaction.Query.Req.prototype.getInfer = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.session.Transaction.Query.Req.prototype.setInfer = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Query.Iter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.session.Transaction.Query.Iter.oneofGroups_);
};
goog.inherits(proto.session.Transaction.Query.Iter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Query.Iter.displayName = 'proto.session.Transaction.Query.Iter';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.session.Transaction.Query.Iter.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.session.Transaction.Query.Iter.IterCase = {
  ITER_NOT_SET: 0,
  ID: 1,
  NULL: 2
};

/**
 * @return {proto.session.Transaction.Query.Iter.IterCase}
 */
proto.session.Transaction.Query.Iter.prototype.getIterCase = function() {
  return /** @type {proto.session.Transaction.Query.Iter.IterCase} */(jspb.Message.computeOneofCase(this, proto.session.Transaction.Query.Iter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Query.Iter.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Query.Iter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Query.Iter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Query.Iter.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pb_null: (f = msg.getNull()) && Concept_pb.Null.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Query.Iter}
 */
proto.session.Transaction.Query.Iter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Query.Iter;
  return proto.session.Transaction.Query.Iter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Query.Iter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Query.Iter}
 */
proto.session.Transaction.Query.Iter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = new Concept_pb.Null;
      reader.readMessage(value,Concept_pb.Null.deserializeBinaryFromReader);
      msg.setNull(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Query.Iter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Query.Iter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Query.Iter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Query.Iter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getNull();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Concept_pb.Null.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.Query.Iter.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.Query.Iter.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.Query.Iter.Res.displayName = 'proto.session.Transaction.Query.Iter.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.Query.Iter.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.Query.Iter.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.Query.Iter.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Query.Iter.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    answer: (f = msg.getAnswer()) && Answer_pb.Answer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.Query.Iter.Res}
 */
proto.session.Transaction.Query.Iter.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.Query.Iter.Res;
  return proto.session.Transaction.Query.Iter.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.Query.Iter.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.Query.Iter.Res}
 */
proto.session.Transaction.Query.Iter.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Answer_pb.Answer;
      reader.readMessage(value,Answer_pb.Answer.deserializeBinaryFromReader);
      msg.setAnswer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.Query.Iter.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.Query.Iter.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.Query.Iter.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.Query.Iter.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnswer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Answer_pb.Answer.serializeBinaryToWriter
    );
  }
};


/**
 * optional Answer answer = 1;
 * @return {?proto.session.Answer}
 */
proto.session.Transaction.Query.Iter.Res.prototype.getAnswer = function() {
  return /** @type{?proto.session.Answer} */ (
    jspb.Message.getWrapperField(this, Answer_pb.Answer, 1));
};


/** @param {?proto.session.Answer|undefined} value */
proto.session.Transaction.Query.Iter.Res.prototype.setAnswer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.session.Transaction.Query.Iter.Res.prototype.clearAnswer = function() {
  this.setAnswer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Query.Iter.Res.prototype.hasAnswer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.session.Transaction.Query.Iter.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.session.Transaction.Query.Iter.prototype.setId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.session.Transaction.Query.Iter.oneofGroups_[0], value);
};


proto.session.Transaction.Query.Iter.prototype.clearId = function() {
  jspb.Message.setOneofField(this, 1, proto.session.Transaction.Query.Iter.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Query.Iter.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Null null = 2;
 * @return {?proto.session.Null}
 */
proto.session.Transaction.Query.Iter.prototype.getNull = function() {
  return /** @type{?proto.session.Null} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Null, 2));
};


/** @param {?proto.session.Null|undefined} value */
proto.session.Transaction.Query.Iter.prototype.setNull = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.session.Transaction.Query.Iter.oneofGroups_[0], value);
};


proto.session.Transaction.Query.Iter.prototype.clearNull = function() {
  this.setNull(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.Query.Iter.prototype.hasNull = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetSchemaConcept = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.GetSchemaConcept, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetSchemaConcept.displayName = 'proto.session.Transaction.GetSchemaConcept';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetSchemaConcept.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetSchemaConcept.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetSchemaConcept} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetSchemaConcept.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetSchemaConcept}
 */
proto.session.Transaction.GetSchemaConcept.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetSchemaConcept;
  return proto.session.Transaction.GetSchemaConcept.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetSchemaConcept} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetSchemaConcept}
 */
proto.session.Transaction.GetSchemaConcept.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetSchemaConcept.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetSchemaConcept.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetSchemaConcept} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetSchemaConcept.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetSchemaConcept.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.GetSchemaConcept.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetSchemaConcept.Req.displayName = 'proto.session.Transaction.GetSchemaConcept.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetSchemaConcept.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetSchemaConcept.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetSchemaConcept.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetSchemaConcept.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetSchemaConcept.Req}
 */
proto.session.Transaction.GetSchemaConcept.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetSchemaConcept.Req;
  return proto.session.Transaction.GetSchemaConcept.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetSchemaConcept.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetSchemaConcept.Req}
 */
proto.session.Transaction.GetSchemaConcept.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetSchemaConcept.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetSchemaConcept.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetSchemaConcept.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetSchemaConcept.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.session.Transaction.GetSchemaConcept.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.GetSchemaConcept.Req.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetSchemaConcept.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.session.Transaction.GetSchemaConcept.Res.oneofGroups_);
};
goog.inherits(proto.session.Transaction.GetSchemaConcept.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetSchemaConcept.Res.displayName = 'proto.session.Transaction.GetSchemaConcept.Res';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.session.Transaction.GetSchemaConcept.Res.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.session.Transaction.GetSchemaConcept.Res.ResCase = {
  RES_NOT_SET: 0,
  SCHEMACONCEPT: 1,
  NULL: 2
};

/**
 * @return {proto.session.Transaction.GetSchemaConcept.Res.ResCase}
 */
proto.session.Transaction.GetSchemaConcept.Res.prototype.getResCase = function() {
  return /** @type {proto.session.Transaction.GetSchemaConcept.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.session.Transaction.GetSchemaConcept.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetSchemaConcept.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetSchemaConcept.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetSchemaConcept.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetSchemaConcept.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    schemaconcept: (f = msg.getSchemaconcept()) && Concept_pb.Concept.toObject(includeInstance, f),
    pb_null: (f = msg.getNull()) && Concept_pb.Null.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetSchemaConcept.Res}
 */
proto.session.Transaction.GetSchemaConcept.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetSchemaConcept.Res;
  return proto.session.Transaction.GetSchemaConcept.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetSchemaConcept.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetSchemaConcept.Res}
 */
proto.session.Transaction.GetSchemaConcept.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.Concept;
      reader.readMessage(value,Concept_pb.Concept.deserializeBinaryFromReader);
      msg.setSchemaconcept(value);
      break;
    case 2:
      var value = new Concept_pb.Null;
      reader.readMessage(value,Concept_pb.Null.deserializeBinaryFromReader);
      msg.setNull(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetSchemaConcept.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetSchemaConcept.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetSchemaConcept.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetSchemaConcept.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSchemaconcept();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.Concept.serializeBinaryToWriter
    );
  }
  f = message.getNull();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Concept_pb.Null.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept schemaConcept = 1;
 * @return {?proto.session.Concept}
 */
proto.session.Transaction.GetSchemaConcept.Res.prototype.getSchemaconcept = function() {
  return /** @type{?proto.session.Concept} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Concept, 1));
};


/** @param {?proto.session.Concept|undefined} value */
proto.session.Transaction.GetSchemaConcept.Res.prototype.setSchemaconcept = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.session.Transaction.GetSchemaConcept.Res.oneofGroups_[0], value);
};


proto.session.Transaction.GetSchemaConcept.Res.prototype.clearSchemaconcept = function() {
  this.setSchemaconcept(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.GetSchemaConcept.Res.prototype.hasSchemaconcept = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Null null = 2;
 * @return {?proto.session.Null}
 */
proto.session.Transaction.GetSchemaConcept.Res.prototype.getNull = function() {
  return /** @type{?proto.session.Null} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Null, 2));
};


/** @param {?proto.session.Null|undefined} value */
proto.session.Transaction.GetSchemaConcept.Res.prototype.setNull = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.session.Transaction.GetSchemaConcept.Res.oneofGroups_[0], value);
};


proto.session.Transaction.GetSchemaConcept.Res.prototype.clearNull = function() {
  this.setNull(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.GetSchemaConcept.Res.prototype.hasNull = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetConcept = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.GetConcept, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetConcept.displayName = 'proto.session.Transaction.GetConcept';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetConcept.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetConcept.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetConcept} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetConcept.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetConcept}
 */
proto.session.Transaction.GetConcept.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetConcept;
  return proto.session.Transaction.GetConcept.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetConcept} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetConcept}
 */
proto.session.Transaction.GetConcept.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetConcept.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetConcept.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetConcept} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetConcept.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetConcept.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.GetConcept.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetConcept.Req.displayName = 'proto.session.Transaction.GetConcept.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetConcept.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetConcept.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetConcept.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetConcept.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetConcept.Req}
 */
proto.session.Transaction.GetConcept.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetConcept.Req;
  return proto.session.Transaction.GetConcept.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetConcept.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetConcept.Req}
 */
proto.session.Transaction.GetConcept.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetConcept.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetConcept.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetConcept.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetConcept.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.session.Transaction.GetConcept.Req.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.GetConcept.Req.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetConcept.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.session.Transaction.GetConcept.Res.oneofGroups_);
};
goog.inherits(proto.session.Transaction.GetConcept.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetConcept.Res.displayName = 'proto.session.Transaction.GetConcept.Res';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.session.Transaction.GetConcept.Res.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.session.Transaction.GetConcept.Res.ResCase = {
  RES_NOT_SET: 0,
  CONCEPT: 1,
  NULL: 2
};

/**
 * @return {proto.session.Transaction.GetConcept.Res.ResCase}
 */
proto.session.Transaction.GetConcept.Res.prototype.getResCase = function() {
  return /** @type {proto.session.Transaction.GetConcept.Res.ResCase} */(jspb.Message.computeOneofCase(this, proto.session.Transaction.GetConcept.Res.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetConcept.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetConcept.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetConcept.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetConcept.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    concept: (f = msg.getConcept()) && Concept_pb.Concept.toObject(includeInstance, f),
    pb_null: (f = msg.getNull()) && Concept_pb.Null.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetConcept.Res}
 */
proto.session.Transaction.GetConcept.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetConcept.Res;
  return proto.session.Transaction.GetConcept.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetConcept.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetConcept.Res}
 */
proto.session.Transaction.GetConcept.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.Concept;
      reader.readMessage(value,Concept_pb.Concept.deserializeBinaryFromReader);
      msg.setConcept(value);
      break;
    case 2:
      var value = new Concept_pb.Null;
      reader.readMessage(value,Concept_pb.Null.deserializeBinaryFromReader);
      msg.setNull(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetConcept.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetConcept.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetConcept.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetConcept.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConcept();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.Concept.serializeBinaryToWriter
    );
  }
  f = message.getNull();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Concept_pb.Null.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept concept = 1;
 * @return {?proto.session.Concept}
 */
proto.session.Transaction.GetConcept.Res.prototype.getConcept = function() {
  return /** @type{?proto.session.Concept} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Concept, 1));
};


/** @param {?proto.session.Concept|undefined} value */
proto.session.Transaction.GetConcept.Res.prototype.setConcept = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.session.Transaction.GetConcept.Res.oneofGroups_[0], value);
};


proto.session.Transaction.GetConcept.Res.prototype.clearConcept = function() {
  this.setConcept(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.GetConcept.Res.prototype.hasConcept = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Null null = 2;
 * @return {?proto.session.Null}
 */
proto.session.Transaction.GetConcept.Res.prototype.getNull = function() {
  return /** @type{?proto.session.Null} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Null, 2));
};


/** @param {?proto.session.Null|undefined} value */
proto.session.Transaction.GetConcept.Res.prototype.setNull = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.session.Transaction.GetConcept.Res.oneofGroups_[0], value);
};


proto.session.Transaction.GetConcept.Res.prototype.clearNull = function() {
  this.setNull(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.GetConcept.Res.prototype.hasNull = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.GetAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetAttributes.displayName = 'proto.session.Transaction.GetAttributes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetAttributes}
 */
proto.session.Transaction.GetAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetAttributes;
  return proto.session.Transaction.GetAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetAttributes}
 */
proto.session.Transaction.GetAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetAttributes.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.GetAttributes.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetAttributes.Req.displayName = 'proto.session.Transaction.GetAttributes.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetAttributes.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetAttributes.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetAttributes.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetAttributes.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && Concept_pb.ValueObject.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetAttributes.Req}
 */
proto.session.Transaction.GetAttributes.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetAttributes.Req;
  return proto.session.Transaction.GetAttributes.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetAttributes.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetAttributes.Req}
 */
proto.session.Transaction.GetAttributes.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.ValueObject;
      reader.readMessage(value,Concept_pb.ValueObject.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetAttributes.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetAttributes.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetAttributes.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetAttributes.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.ValueObject.serializeBinaryToWriter
    );
  }
};


/**
 * optional ValueObject value = 1;
 * @return {?proto.session.ValueObject}
 */
proto.session.Transaction.GetAttributes.Req.prototype.getValue = function() {
  return /** @type{?proto.session.ValueObject} */ (
    jspb.Message.getWrapperField(this, Concept_pb.ValueObject, 1));
};


/** @param {?proto.session.ValueObject|undefined} value */
proto.session.Transaction.GetAttributes.Req.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.session.Transaction.GetAttributes.Req.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.GetAttributes.Req.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetAttributes.Iter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.GetAttributes.Iter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetAttributes.Iter.displayName = 'proto.session.Transaction.GetAttributes.Iter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetAttributes.Iter.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetAttributes.Iter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetAttributes.Iter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetAttributes.Iter.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetAttributes.Iter}
 */
proto.session.Transaction.GetAttributes.Iter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetAttributes.Iter;
  return proto.session.Transaction.GetAttributes.Iter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetAttributes.Iter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetAttributes.Iter}
 */
proto.session.Transaction.GetAttributes.Iter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetAttributes.Iter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetAttributes.Iter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetAttributes.Iter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetAttributes.Iter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.GetAttributes.Iter.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.GetAttributes.Iter.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.GetAttributes.Iter.Res.displayName = 'proto.session.Transaction.GetAttributes.Iter.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.GetAttributes.Iter.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.GetAttributes.Iter.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.GetAttributes.Iter.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetAttributes.Iter.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    attribute: (f = msg.getAttribute()) && Concept_pb.Concept.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.GetAttributes.Iter.Res}
 */
proto.session.Transaction.GetAttributes.Iter.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.GetAttributes.Iter.Res;
  return proto.session.Transaction.GetAttributes.Iter.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.GetAttributes.Iter.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.GetAttributes.Iter.Res}
 */
proto.session.Transaction.GetAttributes.Iter.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.Concept;
      reader.readMessage(value,Concept_pb.Concept.deserializeBinaryFromReader);
      msg.setAttribute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.GetAttributes.Iter.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.GetAttributes.Iter.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.GetAttributes.Iter.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.GetAttributes.Iter.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttribute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.Concept.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept attribute = 1;
 * @return {?proto.session.Concept}
 */
proto.session.Transaction.GetAttributes.Iter.Res.prototype.getAttribute = function() {
  return /** @type{?proto.session.Concept} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Concept, 1));
};


/** @param {?proto.session.Concept|undefined} value */
proto.session.Transaction.GetAttributes.Iter.Res.prototype.setAttribute = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.session.Transaction.GetAttributes.Iter.Res.prototype.clearAttribute = function() {
  this.setAttribute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.GetAttributes.Iter.Res.prototype.hasAttribute = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.session.Transaction.GetAttributes.Iter.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.session.Transaction.GetAttributes.Iter.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutEntityType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutEntityType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutEntityType.displayName = 'proto.session.Transaction.PutEntityType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutEntityType.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutEntityType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutEntityType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutEntityType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutEntityType}
 */
proto.session.Transaction.PutEntityType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutEntityType;
  return proto.session.Transaction.PutEntityType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutEntityType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutEntityType}
 */
proto.session.Transaction.PutEntityType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutEntityType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutEntityType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutEntityType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutEntityType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutEntityType.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutEntityType.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutEntityType.Req.displayName = 'proto.session.Transaction.PutEntityType.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutEntityType.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutEntityType.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutEntityType.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutEntityType.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutEntityType.Req}
 */
proto.session.Transaction.PutEntityType.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutEntityType.Req;
  return proto.session.Transaction.PutEntityType.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutEntityType.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutEntityType.Req}
 */
proto.session.Transaction.PutEntityType.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutEntityType.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutEntityType.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutEntityType.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutEntityType.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.session.Transaction.PutEntityType.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.PutEntityType.Req.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutEntityType.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutEntityType.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutEntityType.Res.displayName = 'proto.session.Transaction.PutEntityType.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutEntityType.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutEntityType.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutEntityType.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutEntityType.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitytype: (f = msg.getEntitytype()) && Concept_pb.Concept.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutEntityType.Res}
 */
proto.session.Transaction.PutEntityType.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutEntityType.Res;
  return proto.session.Transaction.PutEntityType.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutEntityType.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutEntityType.Res}
 */
proto.session.Transaction.PutEntityType.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.Concept;
      reader.readMessage(value,Concept_pb.Concept.deserializeBinaryFromReader);
      msg.setEntitytype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutEntityType.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutEntityType.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutEntityType.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutEntityType.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitytype();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.Concept.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept entityType = 1;
 * @return {?proto.session.Concept}
 */
proto.session.Transaction.PutEntityType.Res.prototype.getEntitytype = function() {
  return /** @type{?proto.session.Concept} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Concept, 1));
};


/** @param {?proto.session.Concept|undefined} value */
proto.session.Transaction.PutEntityType.Res.prototype.setEntitytype = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.session.Transaction.PutEntityType.Res.prototype.clearEntitytype = function() {
  this.setEntitytype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.PutEntityType.Res.prototype.hasEntitytype = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutAttributeType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutAttributeType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutAttributeType.displayName = 'proto.session.Transaction.PutAttributeType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutAttributeType.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutAttributeType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutAttributeType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutAttributeType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutAttributeType}
 */
proto.session.Transaction.PutAttributeType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutAttributeType;
  return proto.session.Transaction.PutAttributeType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutAttributeType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutAttributeType}
 */
proto.session.Transaction.PutAttributeType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutAttributeType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutAttributeType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutAttributeType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutAttributeType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutAttributeType.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutAttributeType.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutAttributeType.Req.displayName = 'proto.session.Transaction.PutAttributeType.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutAttributeType.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutAttributeType.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutAttributeType.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutAttributeType.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    datatype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutAttributeType.Req}
 */
proto.session.Transaction.PutAttributeType.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutAttributeType.Req;
  return proto.session.Transaction.PutAttributeType.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutAttributeType.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutAttributeType.Req}
 */
proto.session.Transaction.PutAttributeType.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {!proto.session.AttributeType.DATA_TYPE} */ (reader.readEnum());
      msg.setDatatype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutAttributeType.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutAttributeType.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutAttributeType.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutAttributeType.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDatatype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.session.Transaction.PutAttributeType.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.PutAttributeType.Req.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional AttributeType.DATA_TYPE dataType = 2;
 * @return {!proto.session.AttributeType.DATA_TYPE}
 */
proto.session.Transaction.PutAttributeType.Req.prototype.getDatatype = function() {
  return /** @type {!proto.session.AttributeType.DATA_TYPE} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.session.AttributeType.DATA_TYPE} value */
proto.session.Transaction.PutAttributeType.Req.prototype.setDatatype = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutAttributeType.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutAttributeType.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutAttributeType.Res.displayName = 'proto.session.Transaction.PutAttributeType.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutAttributeType.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutAttributeType.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutAttributeType.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutAttributeType.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributetype: (f = msg.getAttributetype()) && Concept_pb.Concept.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutAttributeType.Res}
 */
proto.session.Transaction.PutAttributeType.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutAttributeType.Res;
  return proto.session.Transaction.PutAttributeType.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutAttributeType.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutAttributeType.Res}
 */
proto.session.Transaction.PutAttributeType.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.Concept;
      reader.readMessage(value,Concept_pb.Concept.deserializeBinaryFromReader);
      msg.setAttributetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutAttributeType.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutAttributeType.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutAttributeType.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutAttributeType.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributetype();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.Concept.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept attributeType = 1;
 * @return {?proto.session.Concept}
 */
proto.session.Transaction.PutAttributeType.Res.prototype.getAttributetype = function() {
  return /** @type{?proto.session.Concept} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Concept, 1));
};


/** @param {?proto.session.Concept|undefined} value */
proto.session.Transaction.PutAttributeType.Res.prototype.setAttributetype = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.session.Transaction.PutAttributeType.Res.prototype.clearAttributetype = function() {
  this.setAttributetype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.PutAttributeType.Res.prototype.hasAttributetype = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutRelationType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutRelationType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutRelationType.displayName = 'proto.session.Transaction.PutRelationType';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutRelationType.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutRelationType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutRelationType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRelationType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutRelationType}
 */
proto.session.Transaction.PutRelationType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutRelationType;
  return proto.session.Transaction.PutRelationType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutRelationType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutRelationType}
 */
proto.session.Transaction.PutRelationType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutRelationType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutRelationType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutRelationType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRelationType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutRelationType.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutRelationType.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutRelationType.Req.displayName = 'proto.session.Transaction.PutRelationType.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutRelationType.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutRelationType.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutRelationType.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRelationType.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutRelationType.Req}
 */
proto.session.Transaction.PutRelationType.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutRelationType.Req;
  return proto.session.Transaction.PutRelationType.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutRelationType.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutRelationType.Req}
 */
proto.session.Transaction.PutRelationType.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutRelationType.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutRelationType.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutRelationType.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRelationType.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.session.Transaction.PutRelationType.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.PutRelationType.Req.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutRelationType.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutRelationType.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutRelationType.Res.displayName = 'proto.session.Transaction.PutRelationType.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutRelationType.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutRelationType.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutRelationType.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRelationType.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    relationtype: (f = msg.getRelationtype()) && Concept_pb.Concept.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutRelationType.Res}
 */
proto.session.Transaction.PutRelationType.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutRelationType.Res;
  return proto.session.Transaction.PutRelationType.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutRelationType.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutRelationType.Res}
 */
proto.session.Transaction.PutRelationType.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.Concept;
      reader.readMessage(value,Concept_pb.Concept.deserializeBinaryFromReader);
      msg.setRelationtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutRelationType.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutRelationType.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutRelationType.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRelationType.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRelationtype();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.Concept.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept relationType = 1;
 * @return {?proto.session.Concept}
 */
proto.session.Transaction.PutRelationType.Res.prototype.getRelationtype = function() {
  return /** @type{?proto.session.Concept} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Concept, 1));
};


/** @param {?proto.session.Concept|undefined} value */
proto.session.Transaction.PutRelationType.Res.prototype.setRelationtype = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.session.Transaction.PutRelationType.Res.prototype.clearRelationtype = function() {
  this.setRelationtype(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.PutRelationType.Res.prototype.hasRelationtype = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutRole = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutRole, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutRole.displayName = 'proto.session.Transaction.PutRole';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutRole.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutRole.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutRole} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRole.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutRole}
 */
proto.session.Transaction.PutRole.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutRole;
  return proto.session.Transaction.PutRole.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutRole} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutRole}
 */
proto.session.Transaction.PutRole.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutRole.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutRole.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutRole} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRole.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutRole.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutRole.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutRole.Req.displayName = 'proto.session.Transaction.PutRole.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutRole.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutRole.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutRole.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRole.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutRole.Req}
 */
proto.session.Transaction.PutRole.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutRole.Req;
  return proto.session.Transaction.PutRole.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutRole.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutRole.Req}
 */
proto.session.Transaction.PutRole.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutRole.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutRole.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutRole.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRole.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.session.Transaction.PutRole.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.PutRole.Req.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutRole.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutRole.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutRole.Res.displayName = 'proto.session.Transaction.PutRole.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutRole.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutRole.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutRole.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRole.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    role: (f = msg.getRole()) && Concept_pb.Concept.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutRole.Res}
 */
proto.session.Transaction.PutRole.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutRole.Res;
  return proto.session.Transaction.PutRole.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutRole.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutRole.Res}
 */
proto.session.Transaction.PutRole.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.Concept;
      reader.readMessage(value,Concept_pb.Concept.deserializeBinaryFromReader);
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutRole.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutRole.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutRole.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRole.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRole();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.Concept.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept role = 1;
 * @return {?proto.session.Concept}
 */
proto.session.Transaction.PutRole.Res.prototype.getRole = function() {
  return /** @type{?proto.session.Concept} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Concept, 1));
};


/** @param {?proto.session.Concept|undefined} value */
proto.session.Transaction.PutRole.Res.prototype.setRole = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.session.Transaction.PutRole.Res.prototype.clearRole = function() {
  this.setRole(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.PutRole.Res.prototype.hasRole = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutRule.displayName = 'proto.session.Transaction.PutRule';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutRule.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRule.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutRule}
 */
proto.session.Transaction.PutRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutRule;
  return proto.session.Transaction.PutRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutRule}
 */
proto.session.Transaction.PutRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutRule.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutRule.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutRule.Req.displayName = 'proto.session.Transaction.PutRule.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutRule.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutRule.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutRule.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRule.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    when: jspb.Message.getFieldWithDefault(msg, 2, ""),
    then: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutRule.Req}
 */
proto.session.Transaction.PutRule.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutRule.Req;
  return proto.session.Transaction.PutRule.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutRule.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutRule.Req}
 */
proto.session.Transaction.PutRule.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhen(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutRule.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutRule.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutRule.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRule.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWhen();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThen();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.session.Transaction.PutRule.Req.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.PutRule.Req.prototype.setLabel = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string when = 2;
 * @return {string}
 */
proto.session.Transaction.PutRule.Req.prototype.getWhen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.session.Transaction.PutRule.Req.prototype.setWhen = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string then = 3;
 * @return {string}
 */
proto.session.Transaction.PutRule.Req.prototype.getThen = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.session.Transaction.PutRule.Req.prototype.setThen = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.PutRule.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.PutRule.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.PutRule.Res.displayName = 'proto.session.Transaction.PutRule.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.PutRule.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.PutRule.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.PutRule.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRule.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    rule: (f = msg.getRule()) && Concept_pb.Concept.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.PutRule.Res}
 */
proto.session.Transaction.PutRule.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.PutRule.Res;
  return proto.session.Transaction.PutRule.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.PutRule.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.PutRule.Res}
 */
proto.session.Transaction.PutRule.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.Concept;
      reader.readMessage(value,Concept_pb.Concept.deserializeBinaryFromReader);
      msg.setRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.PutRule.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.PutRule.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.PutRule.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.PutRule.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRule();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.Concept.serializeBinaryToWriter
    );
  }
};


/**
 * optional Concept rule = 1;
 * @return {?proto.session.Concept}
 */
proto.session.Transaction.PutRule.Res.prototype.getRule = function() {
  return /** @type{?proto.session.Concept} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Concept, 1));
};


/** @param {?proto.session.Concept|undefined} value */
proto.session.Transaction.PutRule.Res.prototype.setRule = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.session.Transaction.PutRule.Res.prototype.clearRule = function() {
  this.setRule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.PutRule.Res.prototype.hasRule = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.ConceptMethod = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.ConceptMethod, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.ConceptMethod.displayName = 'proto.session.Transaction.ConceptMethod';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.ConceptMethod.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.ConceptMethod.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.ConceptMethod} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.ConceptMethod.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.ConceptMethod}
 */
proto.session.Transaction.ConceptMethod.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.ConceptMethod;
  return proto.session.Transaction.ConceptMethod.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.ConceptMethod} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.ConceptMethod}
 */
proto.session.Transaction.ConceptMethod.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.ConceptMethod.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.ConceptMethod.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.ConceptMethod} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.ConceptMethod.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.ConceptMethod.Req = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.ConceptMethod.Req, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.ConceptMethod.Req.displayName = 'proto.session.Transaction.ConceptMethod.Req';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.ConceptMethod.Req.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.ConceptMethod.Req.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.ConceptMethod.Req} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.ConceptMethod.Req.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    method: (f = msg.getMethod()) && Concept_pb.Method.Req.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.ConceptMethod.Req}
 */
proto.session.Transaction.ConceptMethod.Req.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.ConceptMethod.Req;
  return proto.session.Transaction.ConceptMethod.Req.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.ConceptMethod.Req} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.ConceptMethod.Req}
 */
proto.session.Transaction.ConceptMethod.Req.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new Concept_pb.Method.Req;
      reader.readMessage(value,Concept_pb.Method.Req.deserializeBinaryFromReader);
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.ConceptMethod.Req.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.ConceptMethod.Req.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.ConceptMethod.Req} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.ConceptMethod.Req.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMethod();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Concept_pb.Method.Req.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.session.Transaction.ConceptMethod.Req.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.session.Transaction.ConceptMethod.Req.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Method.Req method = 2;
 * @return {?proto.session.Method.Req}
 */
proto.session.Transaction.ConceptMethod.Req.prototype.getMethod = function() {
  return /** @type{?proto.session.Method.Req} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Method.Req, 2));
};


/** @param {?proto.session.Method.Req|undefined} value */
proto.session.Transaction.ConceptMethod.Req.prototype.setMethod = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.session.Transaction.ConceptMethod.Req.prototype.clearMethod = function() {
  this.setMethod(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.ConceptMethod.Req.prototype.hasMethod = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.session.Transaction.ConceptMethod.Res = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.session.Transaction.ConceptMethod.Res, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.session.Transaction.ConceptMethod.Res.displayName = 'proto.session.Transaction.ConceptMethod.Res';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.session.Transaction.ConceptMethod.Res.prototype.toObject = function(opt_includeInstance) {
  return proto.session.Transaction.ConceptMethod.Res.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.session.Transaction.ConceptMethod.Res} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.ConceptMethod.Res.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: (f = msg.getResponse()) && Concept_pb.Method.Res.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.session.Transaction.ConceptMethod.Res}
 */
proto.session.Transaction.ConceptMethod.Res.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.session.Transaction.ConceptMethod.Res;
  return proto.session.Transaction.ConceptMethod.Res.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.session.Transaction.ConceptMethod.Res} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.session.Transaction.ConceptMethod.Res}
 */
proto.session.Transaction.ConceptMethod.Res.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Concept_pb.Method.Res;
      reader.readMessage(value,Concept_pb.Method.Res.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.session.Transaction.ConceptMethod.Res.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.session.Transaction.ConceptMethod.Res.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.session.Transaction.ConceptMethod.Res} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.session.Transaction.ConceptMethod.Res.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Concept_pb.Method.Res.serializeBinaryToWriter
    );
  }
};


/**
 * optional Method.Res response = 1;
 * @return {?proto.session.Method.Res}
 */
proto.session.Transaction.ConceptMethod.Res.prototype.getResponse = function() {
  return /** @type{?proto.session.Method.Res} */ (
    jspb.Message.getWrapperField(this, Concept_pb.Method.Res, 1));
};


/** @param {?proto.session.Method.Res|undefined} value */
proto.session.Transaction.ConceptMethod.Res.prototype.setResponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.session.Transaction.ConceptMethod.Res.prototype.clearResponse = function() {
  this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.session.Transaction.ConceptMethod.Res.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.session);
